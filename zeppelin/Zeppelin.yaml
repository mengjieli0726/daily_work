asc_template_version: 2015-10-30

description: >
    Sample application template for a Spark 1.5.2 with notebook that contains:
      1. Spark master service
      2. Spark shuffle service
      3. Zeppelin on Spark


parameter_groups:
    - label: Resource Groups
      description: Parameters for resource groups
      parameters:
        - sparkms_rg_param
        - sparkms_zeppelin_rg_param
    - label: Consumers
      description: Parameters for consumers
      parameters:
        - sparkms_consumer_param
        - sparkms_zeppelin_consumer_param
    - label: Docker Images
      description: Paramters for Docker Images
      parameters:
        - registry_hostname
        - sparkms_image_name
        - zeppelin_image_name

parameters:
    sparkms_rg_param:
        type: string
        label: Resource group for Spark master batch service
        description: Resource group for the Spark master batch service
        constraints:
            - custom_constraint: asc.getresourcegroup

    sparkms_zeppelin_rg_param:
        type: string
        label: Resource Group for Zeppelin service
        description: Resource group for the Spark master zeppelin service
        constraints:
            - custom_constraint: asc.getresourcegroup

    sparkms_consumer_param:
        type: string
        label: Consumer for Spark batch service
        description: Consumer for the Spark batch service
        default: spark

    sparkms_zeppelin_consumer_param:
        type: string
        label: Consumer for Spark master service for zeppelin
        description: Consumer for the Spark master service for zeppelin
        default: spark

    execution_user:
        type: string
        label: spark execution user
        description: spark execution user
        default: root

    sparkms_image_name:
        type: string
        label: Spark master image name
        description: Spark master image name
        default: "hchenxa1986/spark-conductor:1.5.2"

    zeppelin_image_name:
        type: string
        label: Zeppelin image name
        description: zeppelin service image name
        default: "hchenxa1986/zeppelin:0.5.1"

    registry_hostname:
        type: string
        label: Docker Registry Hostname and (optional) Port
        description: Hostname of Docker registry
        default: "docker-reg:5000"

    spark_package_name:
        type: string
        label: spark package
        description: spark package
        constraints:
          - custom_constraint: asc.getpackage

    zeppelin_package_name:
        type: string
        label: zeppelin package
        description: zeppelin package
        constraints:
          - custom_constraint: asc.getpackage

    master_web_port:
        type: number
        label: Spark Master Web UI Port
        description: Port number for the Spark Master web UI
        default: 8080
        constraints:
            - range: { min: 1025, max: 65535 }
              description: Port range must be 1025-65535

    master_port:
        type: number
        label: Spark Master Port
        description: Port number for the Spark master
        default: 7077
        constraints:
            - range: { min: 1025, max: 65535 }
              description: Port range must be 1025-65535

    lim_baseport:
        type: number
        label: EGO Lim Base Port
        description: Based port of EGO lim
        default: 7869
        constraints:
            - range: { min: 1025, max: 65535 }
              description: Lim port range must be 1025-65535

    notebook_baseport:
        type: number
        label: Zeppelin baseport
        description: based port of Zeppelin
        default: 8380
        constraints:
            - range: { min: 1025, max: 65535}

    notebook_websocket_port:
        type: number
        label: Zeppelin websocket port
        description: web sock port for notebook
        default: 8381
        constraints:
            - range: { min: 1025, max: 65535}

    driver_resourcegroup:
        type: string
        label: Resource group for Spark EGO Driver
        description: The MDS resource group name

    executor_resourcegroup:
        type: string
        label: Resource grop for Spark Executor
        description: The MDS resource group name

    spark_home:
        type: string
        label: Spark location which used by docker
        description: provide the spark location which used by docker

    zeppelin_home:
        type: string
        label: Zeppelin localtion which used by docker
        description: provide the zeppelin location which used by docker


resources:
    spark_package:
        type: IBM::ASC::RSPackage
        properties:
            name: { get_param: spark_package_name}
            description: spark package that will be deployed for spark service
            resourcegroups:
              - { get_param: executor_resourcegroup }

    zeppelin_package:
        type: IBM::ASC::RSPackage
        properties:
            name: { get_param: zeppelin_package_name }
            description: zeppelin packag this will be deployed for zeppelin service
            resourcegroups:
              - { get_param: executor_resourcegroup }

    driver_consumer:
        type: IBM::ASC::Consumer
        properties:
            path: { get_param: sparkms_consumer_param }
            executionuser: { get_param: execution_user }
            resourcegroups:
                - { get_param: sparkms_rg_param}

    executor_consumer:
        type: IBM::ASC::Consumer
        properties:
            path: { get_param: sparkms_consumer_param }
            executionuser: { get_param: execution_user }
            resourcegroups:
                - { get_param: sparkms_rg_param }

    sparkms-pod:
        type: IBM::ASC::DockerPod
        properties:
            sharedproperties:
                startuptimeout_sec: 3600
                network:
                    type: host
            containers:
                - { get_resource: sparkms-container }

    sparkss-pod:
        type: IBM::ASC::DockerPod
        properties:
            sharedproperties:
                startuptimeout_sec: 3600
                network:
                    type: host
            containers:
                - { get_resource: sparkss-container }

    zeppelin-pod:
        type: IBM::ASC::DockerPod
        properties:
            sharedproperties:
                startuptimeout_sec: 3600
                network:
                    type: host
            containers:
                - { get_resource: sparkms-zeppelin-container }

    sparkms-container:
        type: IBM::ASC::DockerContainer
        properties:
            imagename: { list_join: [ "", [ { get_param: sparkms_image_name} ] ] }
            command: { list_join: [ " ", [ /opt/scripts/startms.sh $EGO_MASTER_LIST_PEM, { get_param: master_port}, { get_param: master_web_port }, $EGO_KD_PORT ] ] }
            privileged: true
            volumes:
              - containerpath: /tmp
                hostpath: /tmp
                permissions: rw
              - containerpath: /root
                hostpath: /root
                permissions: rw
              - containerpath: { get_param: spark_home}
                hostpath: { get_param: spark_home}
                permissions: rw

            environmentvariables:
                SPARK_HOME: { get_param: spark_home}
                SPARK_EGO_DRIVER_CONSUMER: { get_resource: driver_consumer }
                SPARK_EGO_DRIVER_PLAN: { get_param: driver_resourcegroup }
                SPARK_EGO_EXECUTOR_CONSUMER: { get_resource: executor_consumer }
                SPARK_EGO_EXECUTOR_PLAN: { get_param: executor_resourcegroup }
                EGO_BASE_PORT: { get_param: lim_baseport}

    sparkms-zeppelin-container:
        type: IBM::ASC::DockerContainer
        properties:
            imagename: { list_join: [ "", [ { get_param: zeppelin_image_name} ] ] }
            command: { list_join: [ " ", [ /opt/scripts/start_zeppelin.sh $SPARK_MASTER] ] }
            privileged: true
            volumes:
              - containerpath: /tmp
                hostpath: /tmp
                permissions: rw
              - containerpath: /root
                hostpath: /root
                permissions: rw
              - containerpath: { get_param: spark_home }
                hostpath: { get_param: spark_home }
                permissions: rw
              - containerpath: { get_param: zeppelin_home }
                hostpath: { get_param: zeppelin_home }
                permissions: rw

            environmentvariables:
                SPARK_MASTER_PORT: { get_param: master_port}
                NOTEBOOK_BASE_PORT: { get_param: notebook_baseport}
                NOTEBOOK_WEBSOCKET_PORT: { get_param: notebook_websocket_port}
                SPARK_EGO_USER: "Admin"
                SPARK_HOME: { get_param: spark_home}
                ZEPPELIN_HOME: { get_param: zeppelin_home}

    sparkss-container:
        type: IBM::ASC::DockerContainer
        properties:
            imagename: { list_join: [ "", [ { get_param: sparkms_image_name } ] ] }
            command: { list_join: [ " ", [ /opt/scripts/startss.sh $EGOSC_INSTANCE_HOST $EGO_KD_PORT ] ] }
            privileged: true
            volumes:
              - containerpath: { get_param: spark_home}
                hostpath: { get_param: spark_home}
                permissions: rw
            environmentvariables:
                SPARK_HOME: { get_param: spark_home}
                EGO_BASE_PORT: { get_param: lim_baseport}
                SPARK_EGO_DRIVER_CONSUMER: { get_resource: driver_consumer }
                SPARK_EGO_DRIVER_PLAN: { get_param: driver_resourcegroup }
                SPARK_EGO_EXECUTOR_CONSUMER: { get_resource: executor_consumer }
                SPARK_EGO_EXECUTOR_PLAN: { get_param: executor_resourcegroup }


    sparkms_activity:
        type: IBM::ASC::Activity
        properties:
            docker: { get_resource: sparkms-pod }
            environmentvariables:
                DEPLOY_HOME: "/opt/"
                SPARK_EGO_DRIVER_CONSUMER: { get_resource: driver_consumer }
                SPARK_EGO_DRIVER_PLAN: { get_param: sparkms_rg_param }
                SPARK_EGO_EXECUTOR_CONSUMER: { get_resource: executor_consumer }
                SPARK_EGO_EXECUTOR_PLAN: { get_param: sparkms_rg_param }
                CONDUCTOR_LOGFILE: { list_join: [ ".", [ "conductor", { get_attr: [_appinstance_, uuid] }, { get_attr: [_appinstance_, name] }, "${EGOSC_SERVICE_NAME}", "${EGOSC_INSTANCE_SEQNO}" ] ] }
                SPARK_EGO_ENABLE_COLLECT_USAGE: true
                SPARK_EGO_DRIVER_RESREQ: "select(('X86_64' || 'LINUXPPC64' || 'LINUXPPC64LE'))"
                SPARK_EGO_EXECUTOR_RESREQ: "select(('X86_64' || 'LINUXPPC64' || 'LINUXPPC64LE'))"
                APP_UUID: { get_attr: [_appinstance_, uuid] }

    spark_zeppelin_activity:
        type: IBM::ASC::Activity
        properties:
            docker: { get_resource: zeppelin-pod }
            environmentvariables:
                SPARK_MASTER: { get_attr: [ sparkms-service, hostname]}

    sparkss_activity:
        type: IBM::ASC::Activity
        properties:
            os: [X86_64]
            docker: { get_resource: sparkss-pod }
            environmentvariables:
                DEPLOY_HOME: /opt/
                SPARK_PRINT_LAUNCH_COMMAND: 0


    sparkms-service:
        type: IBM::ASC::Service
        properties:
            consumer:
                name: { get_param: sparkms_consumer_param }
                executionuser: { get_param: execution_user }
            description: Spark master service
            numinstances:
                min: 1
                max: 1
                maxperhost: 1
                instancetoslotratio: "1:1"
            priority: 10
            needcredential: true
            resourcegroup:  { get_param: sparkms_rg_param }
            activity:
                - { get_resource: sparkms_activity }
            controlpolicy:
                maxrestarts: 10
                hostfailoverinterval_sec: 1
                blockedhostexitvalues: [-1, 1]
            collectusage: true
            resourcerequirement: "select(('X86_64' || 'LINUXPPC64' || 'LINUXPPC64LE'))"

    zeppelin-service:
        type: IBM::ASC::Service
        properties:
            consumer:
                name: { get_param: sparkms_zeppelin_consumer_param }
                executionuser: { get_param: execution_user }
            description: Spark master service for zeppelin
            numinstances:
                min: 1
                max: 1
                maxperhost: 1
                instancetoslotratio: "1:1"
            priority: 10
            needcredential: true
            resourcegroup:  { get_param: sparkms_zeppelin_rg_param }
            activity:
                - { get_resource: spark_zeppelin_activity }
            controlpolicy:
                maxrestarts: 10
                hostfailoverinterval_sec: 1
                blockedhostexitvalues: [-1, 1]
            collectusage: true
            resourcerequirement: "select(('X86_64' || 'LINUXPPC64' || 'LINUXPPC64LE'))"
            dependency:
                - target: { get_resource: sparkms-service }
                  satisfy:
                    - STARTED
                  autostart: true

    sparkss-service:
        type: IBM::ASC::Service
        properties:
            consumer:
                name: { get_param: sparkms_consumer_param }
                executionuser: { get_param: execution_user }
            description: Spark shuffle service
            numinstances:
                min: 1
                max: 5000
                maxperhost: 1
                instancetoslotratio: "1:1"
            priority: 10
            needcredential: false
            resourcegroup: { get_param: sparkms_rg_param }
            activity:
                - { get_resource: sparkss_activity }
            controlpolicy:
                maxrestarts: 10
                hostfailoverinterval_sec: 1
                blockedhostexitvalues: [-1, 1]
            collectusage: true
            resourcerequirement: "select(('X86_64' || 'LINUXPPC64' || 'LINUXPPC64LE'))"


outputs:
    batch_masters:
        description: Spark masters for batch
        value: { list_join: ["", [ "http://", { get_attr: [ sparkms-service, hostname] }, ":", { get_param: master_web_port}]]}
    zeppelin_masters:
        description: Zeppelin hostnames
        value: { list_join: ["",[ "http://", { get_attr: [ zeppelin-service, hostname] }, ":", { get_param: notebook_baseport}]]}

